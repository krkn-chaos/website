<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Application Outage Scenarios on Krkn</title>
    <link>//localhost:62035/docs/scenarios/application-outage/</link>
    <description>Recent content in Application Outage Scenarios on Krkn</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 11 Sep 2024 17:37:33 -0400</lastBuildDate>
    <atom:link href="//localhost:62035/docs/scenarios/application-outage/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Application Outage Scenarios using Krkn</title>
      <link>//localhost:62035/docs/scenarios/application-outage/application-outage-krkn/</link>
      <pubDate>Wed, 04 Jan 2017 00:00:00 +0000</pubDate>
      <guid>//localhost:62035/docs/scenarios/application-outage/application-outage-krkn/</guid>
      <description>Sample scenario config application_outage: # Scenario to create an outage of an application by blocking traffic duration: 600 # Duration in seconds after which the routes will be accessible namespace: &amp;lt;namespace-with-application&amp;gt; # Namespace to target - all application routes will go inaccessible if pod selector is empty pod_selector: {app: foo} # Pods to target block: [Ingress, Egress] # It can be Ingress or Egress or Ingress, Egress Debugging steps in case of failures Kraken creates a network policy blocking the ingress/egress traffic to create an outage, in case of failures before reverting back the network policy, you can delete it manually by executing the following commands to stop the outage:</description>
    </item>
    <item>
      <title>Application outage Scenario using Krkn-hub</title>
      <link>//localhost:62035/docs/scenarios/application-outage/application-outages-krkn-hub/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      <guid>//localhost:62035/docs/scenarios/application-outage/application-outages-krkn-hub/</guid>
      <description>This scenario disrupts the traffic to the specified application to be able to understand the impact of the outage on the dependent service/user experience. Refer docs for more details.&#xA;Run If enabling Cerberus to monitor the cluster and pass/fail the scenario post chaos, refer docs. Make sure to start it before injecting the chaos and set CERBERUS_ENABLED environment variable for the chaos injection container to autoconnect.&#xA;$ podman run --name=&amp;lt;container_name&amp;gt; --net=host --env-host=true -v &amp;lt;path-to-kube-config&amp;gt;:/home/krkn/.</description>
    </item>
  </channel>
</rss>
