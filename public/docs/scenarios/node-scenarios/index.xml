<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node Scenarios on Krkn</title>
    <link>//localhost:64853/docs/scenarios/node-scenarios/</link>
    <description>Recent content in Node Scenarios on Krkn</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 16 Sep 2024 09:27:31 -0400</lastBuildDate>
    <atom:link href="//localhost:64853/docs/scenarios/node-scenarios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Node Scenarios using Krkn</title>
      <link>//localhost:64853/docs/scenarios/node-scenarios/node-scenarios-krkn/</link>
      <pubDate>Wed, 04 Jan 2017 00:00:00 +0000</pubDate>
      <guid>//localhost:64853/docs/scenarios/node-scenarios/node-scenarios-krkn/</guid>
      <description>The following node chaos scenarios are supported:&#xA;node_start_scenario: Scenario to stop the node instance. node_stop_scenario: Scenario to stop the node instance. node_stop_start_scenario: Scenario to stop and then start the node instance. Not supported on VMware. node_termination_scenario: Scenario to terminate the node instance. node_reboot_scenario: Scenario to reboot the node instance. stop_kubelet_scenario: Scenario to stop the kubelet of the node instance. stop_start_kubelet_scenario: Scenario to stop and start the kubelet of the node instance.</description>
    </item>
    <item>
      <title>Node Scenarios using Krkn-Hub</title>
      <link>//localhost:64853/docs/scenarios/node-scenarios/node-scenarios-krkn-hub/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      <guid>//localhost:64853/docs/scenarios/node-scenarios/node-scenarios-krkn-hub/</guid>
      <description>This scenario disrupts the node(s) matching the label on a Kubernetes/OpenShift cluster. Actions/disruptions supported are listed here&#xA;Run If enabling Cerberus to monitor the cluster and pass/fail the scenario post chaos, refer docs. Make sure to start it before injecting the chaos and set CERBERUS_ENABLED environment variable for the chaos injection container to autoconnect.&#xA;$ podman run --name=&amp;lt;container_name&amp;gt; --net=host --env-host=true -v &amp;lt;path-to-kube-config&amp;gt;:/home/krkn/.kube/config:Z -d quay.io/krkn-chaos/krkn-hub:node-scenarios $ podman logs -f &amp;lt;container_name or container_id&amp;gt; # Streams Kraken logs $ podman inspect &amp;lt;container-name or container-id&amp;gt; --format &amp;#34;{{.</description>
    </item>
  </channel>
</rss>
